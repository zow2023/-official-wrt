#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  WORKDIR: /tmp/openwrt-build
  REPO_URL: https://github.com/zow2023/PCODE
  REPO_BRANCH: v6129
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: w6xapk.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:        
    - name: Checkout
      uses: actions/checkout@main

    - name: 🧩 Setup Build Environment
      run: |
        echo "📁 Creating workspace at $WORKDIR"
        mkdir -p $WORKDIR
        echo "✅ Workspace ready: $(realpath $WORKDIR)"
        
    - name: 🔧 Initialize System Environment
      run: |
        echo "🔧 Updating package list..."
        sudo -E apt-get -qq update

        echo "📦 Installing build dependencies..."
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang llvm flex bison g++ gawk \
             gcc-multilib g++-multilib gettext git libelf-dev libncurses5-dev libssl-dev dos2unix dwarves quilt npm jq \
             python3-setuptools rsync swig unzip uuid-dev libblkid-dev file wget xsltproc zlib1g-dev zip zstd
        sudo npm install -g pnpm
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: 🧹 Free Up Disk Space (Maximize /tmp)
      run: |
        echo "🚀 Disk usage before cleanup:"
        df -h /tmp

        echo "🗑️ Removing large unused packages..."
        sudo rm -rf \
          /usr/share/dotnet \
          /opt/hostedtoolcache/CodeQL \
          /usr/local/lib/android \
          /opt/ghc \
          /usr/local/.ghcup \
          /usr/local/share/boost \
          /usr/local/share/powershell \
          /usr/local/lib/jvm \
          /usr/lib/firefox \
          /usr/lib/google-cloud-sdk \
          /usr/share/swift \
          /usr/share/miniconda \
          /usr/share/az* \
          /usr/share/gradle* \
          /usr/share/kotlin* \
          /usr/share/maven \
          /usr/share/php* \
          /usr/share/ruby* \
          /usr/share/sbt \
          /usr/share/apache-maven* \
          /usr/share/rust \
          /usr/share/virtualenv \
          /usr/share/postgresql* \
          /usr/share/docker* \
          /usr/share/phantomjs \
          /usr/share/selenium \
          /usr/share/playwright \
          /usr/share/pyenv

        echo "🧹 Cleaning APT and logs..."
        sudo -E apt-get -y purge $(dpkg -l | grep '^rc' | awk '{print $2}' || true)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo journalctl --vacuum-time=1s
        sudo rm -rf /var/log/* /var/cache/* /tmp/* /snap/*

        echo "🎉 After cleanup:"
        df -h /tmp
    
    - name: 📦 Clone OpenWrt Source Code
      run: |
        cd $WORKDIR
        echo "📥 Cloning OpenWrt from $REPO_URL branch $REPO_BRANCH"
        git clone $REPO_URL -b $REPO_BRANCH openwrt

        echo "🔗 Creating symlink to GITHUB_WORKSPACE"
        ln -sf $WORKDIR/openwrt $GITHUB_WORKSPACE/openwrt

        echo "📊 Final disk usage:"
        df -hT $WORKDIR
          
    - name: 📥 Load Custom Feeds
      run: |
        if [ -e "$FEEDS_CONF" ]; then
          mv $FEEDS_CONF $WORKDIR/openwrt/feeds.conf.default
          echo "✅ Custom feeds.conf loaded"
        fi

        if [ -e "$DIY_P1_SH" ]; then
          chmod +x $DIY_P1_SH
          cd $WORKDIR/openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH
          echo "✅ DIY Part 1 executed"
        fi
        
    
    - name: 🔄 Update & Install Feeds
      run: |
        cd $WORKDIR/openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        

    - name: 🛠️ Load Custom Configuration
      run: |
        cd $WORKDIR/openwrt

        if [ -e "$CONFIG_FILE" ]; then
          mv $GITHUB_WORKSPACE/$CONFIG_FILE .config
          echo "✅ Configuration loaded: $CONFIG_FILE"
        else
          echo "⚠️  Config file '$CONFIG_FILE' not found, using default defconfig"
          make defconfig
        fi

        if [ -e "$DIY_P2_SH" ]; then
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "✅ DIY Part 2 executed"
        fi

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
                
    - name: Download package
      id: package
      run: |
        cd $WORKDIR/openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd $WORKDIR/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Free Disk Space After Build
      run: |
        echo "Disk space before post-build cleanup:"
        df -h
        sudo rm -rf /usr/local/.ghcup
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/lib/android/sdk/ndk
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo apt-get clean
        echo "Disk space after post-build cleanup:"
        df -h

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
